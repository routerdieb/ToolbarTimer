(async function () {
  // this is the code which will be injected into a given page...

  const dropdownOptions = {
    5: "5 Min",
    25: "25 Min",
    55: "55 Min",
    105: "1:45 Hours (1 hour 45 min)",
  };

  let points = (await getPoints()) || 0;

  // elements
  const $evernoteTimer = $('<div class="evernote-timer">');
  const $settingsBtn = $('<button class="settings-btn" type="button">');

  const $rightWrapper = $('<div class="evernote-right-wrapper">');
  const $leftWrapper = $('<div class="left-wrapper">');
  const $controls = $('<div class="evernote-timer-controls">');
  const $dropdownControl = $('<select class="evernote-timer-dropdown">');
  const $btnGoControl = $('<button class="evernote-timer-go" type="button">');
  const $points = $('<span class="evernote-points">');
  const $btnCalendarControl = $(
    '<button class="evernote-calendar-btn" type="button">'
  );
  const $btnCalendarCloseControl = $(
    '<button class="evernote-calendar-popup-close-btn" type="button">'
  );

  const progressBar = $('<div id="myProgress"><div id="myBar"></div></div>');

  $btnCalendarCloseControl.text("×");
  $($btnCalendarCloseControl).click(handleCalendarCloseClick);
  $($points).html(points);
  $btnCalendarControl.append($points);
  $btnCalendarControl.append(
    $(`<img src="${chrome.runtime.getURL("calendar-icon.png")}" />`)
  );

  $leftWrapper.append($settingsBtn)
  $settingsBtn.append(
    $(`<img src="${chrome.runtime.getURL("gear-icon.png")}" />`)
  );
  
  const $calendarPopup = $('<div class="evernote-calendar-popup">');
  const $countDown = $('<div class="evernote-timer-countdown">');
  const $btnStop = $('<button class="evernote-timer-stop">');
  $btnStop.html("✕");
  $($btnStop).click(handleStopClick);

  $($evernoteTimer).append($leftWrapper);
  $($evernoteTimer).append($controls);
  $($evernoteTimer).append($rightWrapper);
  
  $($rightWrapper).append($btnCalendarControl);
  $($btnCalendarControl).click(handleCalendarClick);
  $($rightWrapper).append($calendarPopup);
  $($calendarPopup).html(
    '<iframe src="https://calendar.google.com/calendar/embed?height=600&amp;wkst=2&amp;bgcolor=%23B39DDB&amp;ctz=Europe%2FBerlin&amp;src=dy5lc29AbGl2ZS5kZQ&amp;src=YWRkcmVzc2Jvb2sjY29udGFjdHNAZ3JvdXAudi5jYWxlbmRhci5nb29nbGUuY29t&amp;color=%234285F4&amp;color=%237986CB&amp;mode=WEEK&amp;showTitle=0&amp;showNav=1&amp;showDate=1&amp;showPrint=1&amp;showTabs=1&amp;showCalendars=0&amp;showTz=0" style="border:solid 1px #777" width="800" height="600" frameborder="0" scrolling="no"></iframe>'
  );
  $($calendarPopup).append($btnCalendarCloseControl);
  $($controls).append($dropdownControl);
  for (const value in dropdownOptions) {
    if (Object.hasOwnProperty.call(dropdownOptions, value)) {
      const label = dropdownOptions[value];
      const $option = $(`<option value=${value}>`);
      $option.text(label);
      $($dropdownControl).append($option);
    }
  }
  $($controls).append($btnGoControl);
  $($btnGoControl).text("Go");
  $($btnGoControl).click(handleGoClick);
  

  $($evernoteTimer).append($countDown);
  $($countDown).hide();

  var audio;

  jQuery(document).ready(function ($) {
    $(document.body).prepend(progressBar);
    $(document.body).prepend($evernoteTimer);
  });
  var interval;

  async function handleGoClick() {

    playAudio("engine-start.mp3");
    
    $($controls).hide();
    
    // Set the date we're counting down to
    const now = new Date().getTime();
    const minutes = parseInt($dropdownControl.val());
    const countDownDate = new Date().getTime() + minutes * 60 * 1000;
    const fullTime = minutes * 60;
    console.log(fullTime)
    const distance = countDownDate - now;
    $countDown.html(formatTime(fullTime,distance / 1000));
    
    $($countDown).show();
    // Update the count down every 1 second
    interval = setInterval(function () {
      // Get today's date and time
      const now = new Date().getTime();

      // Find the distance between now and the count down date
      const distance = countDownDate - now;
      $countDown.html(formatTime(fullTime,distance / 1000));
      // If the count down is finished, write some text
      $($controls).hide();
      $countDown.append($btnStop);
      $($countDown).show();

      if (distance < 0) {
        clearInterval(interval);
        $countDown.html("Finished");
        playAudio("ring.mp3");
        switch (minutes) {
          case 25:
            points += 1;
            break;
          case 55:
            points += 2;
            break;
          case 105:
            points += 4;
            break;
        }
        $($points).html(points);
        setPoints(points);
      }
      $countDown.append($btnStop);
      $($btnStop).click(handleStopClick);
    }, 1000);
  }
  function handleStopClick() {
    console.log("handleStopClick");
    clearInterval(interval);
    $countDown.hide();
    $controls.show();
    if (audio) {
      audio.pause();
      audio.currentTime = 0;
    }
  }

  function handleCalendarClick() {
    console.log("handleCalendarClick call");
    showCalenderPopup();
  }
  function handleCalendarCloseClick() {
    console.log("handleCalendarCloseClick call");
    hideCalenderPopup();
  }
  function showCalenderPopup() {
    $($($calendarPopup).show());
  }
  function hideCalenderPopup() {
    $($($calendarPopup).hide());
  }
  function formatTime(fullTime, seconds) {
    var m = Math.ceil(Math.floor(seconds / 60)),
      s = Math.round(seconds - m * 60);
    if(s == 60){
      m += 1
      s = 0
    }
    if (m < 10) m = "0" + m;
    if (s < 10) s = "0" + s;
    document.title = m + ":" + s;

    console.log(seconds);
    updateProgressBar(100.0 - (seconds / fullTime)*100.0);
    return `<span class="evernote-timer-countdown-minute">${m}</span>:<span class="evernote-timer-countdown-second">${s}</span><span style="margin-left: 5px">min</span>`;
  }

  function updateProgressBar(percent){
    elem = document.getElementById("myBar");
    elem.style.width = percent + "%";
  }

  function playAudio(file) {
    if (audio) {
      audio.pause();
      audio.currentTime = 0;
    }
    audio = new Audio(chrome.runtime.getURL(file));
    audio.play();
  }

  async function getPoints() {
    return new Promise((res, rej) => {
      chrome.storage.local.get(["points"], function (result) {
        res(result.points);
      });
    });
  }

  async function setPoints(points) {
    return new Promise((res, rej) => {
      chrome.storage.local.set({ points: points }, function () {
        res(points);
      });
    });
  }
})();
